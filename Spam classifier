data=read.csv(file.choose(), stringsAsFactors = FALSE)
View(data)
class(data$type)
data$type= as.factor(data$type)
str(data$type)
table(data$type)
round(prop.table(table(data$v1))*100,digits = 1)
library(tm)
sms_corpus= VCorpus(VectorSource(data$text))
print(sms_corpus)
class(sms_corpus)
inspect(sms_corpus[1:2])
sms_corpus_clean= tm_map(sms_corpus, content_transformer((tolower)))
sms_corpus_clean=tm_map(sms_corpus_clean,removeNumbers)
sms_corpus_clean= tm_map(sms_corpus_clean, removeWords, stopwords())
sms_corpus_clean= tm_map(sms_corpus_clean, removePunctuation)
sms_corpus_clean= tm_map(sms_corpus_clean, stripWhitespace)
inspect(sms_corpus_clean[1:2])
sms_corpus_clean= tm_map(sms_corpus_clean, PlainTextDocument)
sms_dtm= DocumentTermMatrix(sms_corpus_clean)
sms_dtm
str(sms_dtm)
sms_train = sms_dtm[1:4100,]
sms_test= sms_dtm[4101:5572,]
train_labels= data$type[1:4100]
test_labels= data$type[4101:5572]
prop.table(table(train_labels))
prop.table(table(test_labels))

freq_terms = findFreqTerms(sms_train, 5)
str(freq_terms)
freq_train=sms_train[,freq_terms]
freq_test=sms_test[,freq_terms]
convert_counts = function(x) {
  x = ifelse(x > 0, "YES", "NO")
}
library(e1071)
reduced_dtm.train = apply(freq_train, MARGIN=2, convert_counts)
reduced_dtm.test  = apply(freq_test, MARGIN=2, convert_counts)

sms_classifier = naiveBayes(reduced_dtm.train, train_labels)
sms_test.predicted = predict(sms_classifier, reduced_dtm.test)
table(sms_test.predicted,test_labels)
library(caret)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(type~., data=data, trControl=train_control, method="nb")
print(model)
